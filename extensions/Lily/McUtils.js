// Name: McUtils
// ID: lmsmcutils
// Description: Helpful utilities for any fast food employee.
// By: LilyMakesThings <https://scratch.mit.edu/users/LilyMakesThings/>
// Context: Joke extension based on McDonalds, a fast food chain.
// License: MIT AND LGPL-3.0

/*!
 * Credit to NexusKitten (NamelessCat) for the idea
 */

/* generated l10n code */Scratch.translate.setup({"fi":{"_broken":"rikki","_if [INPUTA] is manager then [INPUTB] else [INPUTC]":"jos [INPUTA] on johtaja, niin [INPUTB] tai muuten [INPUTC]","_is ice cream machine [INPUT]":"onko j√§√§tel√∂kone [INPUT]","_place order [INPUT]":"tilaa [INPUT]","_talk to manager [INPUT]":"puhu johtajalle [INPUT]","_working":"toiminnassa"},"ja":{"_broken":"Â£ä„Çå„Å¶","_if [INPUTA] is manager then [INPUTB] else [INPUTC]":"[INPUTA]„ÅØ„Éû„Éç„Éº„Ç∏„É£„Éº„Åß„ÅÇ„Çã„Å™„Çâ[INPUTB]„ÄÅ„Åß„Å™„Åë„Çå„Å∞[INPUTC]","_is ice cream machine [INPUT]":"„Ç¢„Ç§„Çπ„ÇØ„É™„Éº„É†Ê©ü„ÅØ[INPUT]„ÅÑ„Åæ„Åô„ÅãÔºü","_place order [INPUT]":"[INPUT]„ÇíÊ≥®Êñá„Åô„Çã","_talk to manager [INPUT]":"„Éû„Éç„Éº„Ç∏„É£„Éº„Å´[INPUT]Ë©±„Åó„Åã„Åë„Çã","_working":"Âãï„ÅÑ„Å¶"},"ko":{"_broken":"Í≥†Ïû•ÎÇ®","_if [INPUTA] is manager then [INPUTB] else [INPUTC]":"[INPUTA]Ïù¥(Í∞Ä) Îß§ÎãàÏ†ÄÎùºÎ©¥ [INPUTB] ÏïÑÎãàÎ©¥ [INPUTC]","_is ice cream machine [INPUT]":"ÏïÑÏù¥Ïä§ÌÅ¨Î¶º Í∏∞Í≥ÑÍ∞Ä [INPUT]Ïù∏Í∞Ä?","_place order [INPUT]":"[INPUT] Ï£ºÎ¨∏ÌïòÍ∏∞","_talk to manager [INPUT]":"[INPUT] Îß§ÎãàÏ†ÄÏóêÍ≤å Î¨ªÍ∏∞","_working":"ÏûëÎèôÏ§ë"},"nl":{"_broken":"kapot","_if [INPUTA] is manager then [INPUTB] else [INPUTC]":"als [INPUTA] manager is dan [INPUTB] anders [INPUTC]","_is ice cream machine [INPUT]":"ijsmachine [INPUT]","_place order [INPUT]":"plaats bestelling [INPUT]","_talk to manager [INPUT]":"zeg [INPUT] tegen manager ","_working":"werkt"},"ru":{"_broken":"—Å–ª–æ–º–∞–Ω–∞","_if [INPUTA] is manager then [INPUTB] else [INPUTC]":"–µ—Å–ª–∏ [INPUTA] —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Ç–æ–≥–¥–∞ [INPUTB] –∏–Ω–∞—á–µ [INPUTC]","_is ice cream machine [INPUT]":"–µ—Å–ª–∏ –º–∞—à–∏–Ω–∞ –º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ [INPUT] ","_place order [INPUT]":"—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ [INPUT]","_talk to manager [INPUT]":"–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º [INPUT]","_working":"—Ä–∞–±–æ—Ç–∞–µ—Ç"},"zh-cn":{"_broken":"ÊçüÂùè","_if [INPUTA] is manager then [INPUTB] else [INPUTC]":"Â¶ÇÊûú[INPUTA]ÊòØÈ§êÂéÖÁªèÁêÜÂàô[INPUTB]Âê¶Âàô[INPUTC]","_is ice cream machine [INPUT]":"ÂÜ∞Ê∑áÊ∑ãÊú∫[INPUT]","_place order [INPUT]":"ÁÇπÈ§ê[INPUT]","_talk to manager [INPUT]":"ÂíåÈ§êÂéÖÁªèÁêÜËÆ≤ËØù[INPUT]","_working":"ÂèØÁî®"}});/* end generated l10n code */(function (Scratch) {
  "use strict";

  class lmsmcutils {
    getInfo() {
      return {
        id: "lmsmcutils",
        // eslint-disable-next-line extension/should-translate
        name: "McUtils",
        color1: "#ec2020",
        color3: "#ffe427",
        blocks: [
          {
            opcode: "managerReporter",
            blockType: Scratch.BlockType.REPORTER,
            text: Scratch.translate({
              default: "if [INPUTA] is manager then [INPUTB] else [INPUTC]",
              description:
                "This is a joke block equivalent to 'if [INPUTA] then [INPUTB] else [INPUTC]",
            }),
            arguments: {
              INPUTA: {
                type: Scratch.ArgumentType.BOOLEAN,
              },
              INPUTB: {
                type: Scratch.ArgumentType.STRING,
              },
              INPUTC: {
                type: Scratch.ArgumentType.STRING,
              },
            },
          },
          {
            opcode: "icecreammachine",
            blockType: Scratch.BlockType.BOOLEAN,
            text: Scratch.translate({
              default: "is ice cream machine [INPUT]",
              description:
                "This is a joke block. [INPUT] can be 'working' (reports false) and 'broken' (reports true) because the machine is always broken.",
            }),
            arguments: {
              INPUT: {
                type: Scratch.ArgumentType.STRING,
                menu: "iceCreamMenu",
              },
            },
          },
          {
            opcode: "talkToManager",
            blockType: Scratch.BlockType.BOOLEAN,
            text: Scratch.translate({
              default: "talk to manager [INPUT]",
              description:
                "This is a joke block that just reports whatever you put into it.",
            }),
            arguments: {
              INPUT: {
                type: Scratch.ArgumentType.STRING,
              },
            },
          },
          {
            opcode: "placeOrder",
            blockType: Scratch.BlockType.REPORTER,
            text: Scratch.translate({
              default: "place order [INPUT]",
              description:
                "This is a joke block that just reports whatever yout put into it, except if it contains 'ice cream', then false because the machine is always broken.",
            }),
            arguments: {
              INPUT: {
                type: Scratch.ArgumentType.STRING,
              },
            },
          },
          {
            opcode: "grimaceBlock",
            blockType: Scratch.BlockType.REPORTER,
            // eslint-disable-next-line extension/should-translate
            text: "üéÇ",
            extensions: ["colours_looks"],
            hideFromPalette: new Date().getMonth() !== 5,
          },
        ],
        menus: {
          iceCreamMenu: {
            acceptReporters: true,
            items: [
              {
                text: Scratch.translate({
                  default: "working",
                  description:
                    "Used in context 'is ice cream machine [working]?', a joke block",
                }),
                value: "working",
              },
              {
                text: Scratch.translate({
                  default: "broken",
                  description:
                    "Used in context 'is ice cream machine [broken]?', a joke block",
                }),
                value: "broken",
              },
            ],
          },
        },
      };
    }

    managerReporter(args, util) {
      if (args.INPUTA) {
        return args.INPUTB;
      } else {
        return args.INPUTC;
      }
    }

    icecreammachine(args, util) {
      if (args.INPUT === "working") {
        return false;
      } else {
        return true;
      }
    }

    talkToManager(args, util) {
      return args.INPUT;
    }

    placeOrder(args, util) {
      const text = Scratch.Cast.toString(args.INPUT);
      if (text.includes("ice cream")) {
        return false;
      } else {
        return args.INPUT;
      }
    }

    grimaceBlock(args, util) {
      return "All good things are purple, including Scratch <3";
    }
  }
  Scratch.extensions.register(new lmsmcutils());
})(Scratch);
